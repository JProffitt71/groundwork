// =============================================
//    Fractional grid system by Gary Hepting
//          Last Updated:2013-8-16
//
//    ***** REQUIRES BORDER BOX SIZING *****
//
// =============================================

///////////////////////////////////////////////
//    grid system - placeholders & classes   //
///////////////////////////////////////////////

%container {
  @if $responsive {
    max-width: $container-width;
  } @else {
    width: $container-width;
  }
  margin: 0 auto;
}

%row {
  @include _clear;
  width: $one-whole;
}

@mixin _column() {
  float: left;
  position: relative;
  min-height: 1px;

  &:nth-child(n) {
    clear: none !important;
  }
}

%column {
  width: 100% !important;
  float: none;
  clear: both;
}

%centered {
  float: none !important;
  margin-left: auto !important;
  margin-right: auto !important;
}

@if $grid-classes {
  .container          { @extend %container; }
  .row                { @extend %row; }
  .column             { @extend %column; }
  .centered           { @extend %centered; }
}

$selector-bases: if($grid-classes, "%" ".", "%");

// Extend column selector
@for $i from 1 through length($selector-bases) {

  @for $j from 1 through length($denominators) {
    #{nth($selector-bases, $i) + nth($denominators, $j)},
    #{nth($selector-bases, $i) + nth($denominators-plural, $j)} {
      @extend %column;
    }
  }

}

// generate grid selectors
@mixin grid($break-name: false) {

  $selector: "";

  @for $i from 1 through length($selector-bases) {

    @if $break-name {
      $selector: #{nth($selector-bases, $i) + $break-name}
    }

    @for $j from 1 through length($denominators) {

      // Normal behavior

      #{nth($selector-bases, $i) + nth($denominators, $j)},
      #{nth($selector-bases, $i) + nth($denominators-plural, $j)} {
        &#{$selector} {
          width: percentage(1 / $j) !important;
          @for $width from 2 through $j {
            &#{nth($selector-bases, $i) + nth($numerators, $width)} {
              width: percentage($width / $j) !important;
            }
          }
          @for $right-left-skip from 1 through $j - 1 {
            &#{nth($selector-bases, $i) + "right-" + nth($numerators, $right-left-skip)} {
              left: percentage($right-left-skip / $j);
            }
            &#{nth($selector-bases, $i) + "left-" + nth($numerators, $right-left-skip)} {
              right: percentage($right-left-skip / $j);
            }
            &#{nth($selector-bases, $i) + "skip-" + nth($numerators, $right-left-skip)} {
              margin-left: percentage($right-left-skip / $j);
            }
          }
        }
      }

      // Adapter behavior

      @if $grid-adapter-classes and $j <= length($grid-adapters) {

        #{nth($selector-bases, $i) + nth($numerators, $j) + "-up" + if($break-name, "-" + $break-name, "")} {
          width: nth($grid-adapters, $j) !important;
          float: left !important;
          left: 0 !important;
          right: 0 !important;

          // Remove previous break clears

          &:nth-child(n) {
            clear: none !important;
          }

          // Add current break clears

          &:nth-child(#{$j}n+1) {
            clear: both !important;
          }
        }
      }
    }
  }
}
